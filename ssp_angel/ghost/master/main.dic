OnTranslate
{
	_talk = reference0
	
	// if debug != 1
	// {
		// _sakura_surfaces = ("slight_smile","blush","worried","pensive","relieved","star_struck","smiling_face_with_3_hearts","s_thinking","astonished","scream","sweat_smile")
		// _kero_surfaces = ("neutral_face","unamused","rolling_eyes","k_thinking","face_with_raised_eyebrow","face_exhaling","flushed","teach","expressionless")
		
		// foreach _sakura_surfaces; _surface
		// {
			// _talk = REPLACE(_talk,"\s[" + _surface + "]","\s[0]")
		// }
		
		// foreach _kero_surfaces; _surface
		// {
			// _talk = REPLACE(_talk,"\s[" + _surface + "]","\s[10]")
		// }
	// }
	
	_anchor = "anchor"
	if "GLOSSARY_DEFINITION" _in_ _talk; _anchor = ""
	
	_terms = ("AYA:AYA","BTS:BTS","balloons?:Balloon","Baseware:Baseware",/
	"Calendar skins?:Calendar skin","CROW:CROW","Dressups?:Dressup","Freeshells?:Freeshell",/
	"Ukagaka Dream Team:Ukagaka Dream Team","Ghost'?s?:Ghost/Ukagaka/Nanika","Ukagakas?:Ghost/Ukagaka/Nanika",/
	"Nanikas?:Ghost/Ukagaka/Nanika","Intervals?:Interval","Kawari:Kawari","Kero:Kero","\.?nar:nar","Materia:Materia",/
	"MAKOTO:MAKOTO","MAYUNA:MAYUNA","Plugins?:Plugin","SAORI:SAORI","SHIORIs?:SHIORI","SSP:SSP","Sakura\s?Script:Sakura Script","Sakura:Sakura",/
	"Satori:Satori","SERIKO:SERIKO","Shells?:Shell","Surfaces?:Surface","Ukadoc:Ukadoc","YAYA:YAYA")
	
	void RE_OPTION("mi")
	foreach _terms; _term
	{
		_expression = _term[0,":"]
		_link = _term[1,":"]

		_found = RE_GREP(_talk,"#" + _expression)
		if _found > 0
		{
			for _i = 0; _i < _found; _i++
			{
				_string = RE_GETSTR[_i]
				_talk = REPLACE(_talk,_string,"\_a[OnGlossaryWord,%(_link),%(_anchor)]%(REPLACE(_string,'#',''))\_a",1)
			}
		}
	}
	
	_talk = REPLACE(_talk,"#Ayakamtka","\_a[https://github.com/Ayakamtka]Ayakamtka\_a")
	_talk = REPLACE(_talk,"#GallaTheGalla","\_a[https://gallathegalla.github.io/gtg-ghosts/]GallaTheGalla\_a")
	_talk = REPLACE(_talk,"#Yuyudev","\_a[https://twitter.com/yuyudev]Yuyudev\_a")
	_talk = REPLACE(_talk,"#Zichqec","\_a[https://zichqec.github.io/s-the-skeleton/]Zichqec\_a")
	
	if SHIORI3FW.BalloonName == "Angelbox" || SHIORI3FW.BalloonName == "Angelbox (Biblically Accurate)"; _talk = REPLACE(_talk,"\f[align,center]","\_l[10]\f[align,center]")
	
	if SHIORI3FW.BalloonName == "Angelbox (Biblically Accurate)"
	{
		_talk = REPLACE(_talk,"\0\b[0]","\0\b[%(Balloon.Angel[0])0]")
		_talk = REPLACE(_talk,"\0\b[2]","\0\b[%(Balloon.Angel[0])2]")
		_talk = REPLACE(_talk,"\0\b[4]","\0\b[%(Balloon.Angel[0])4]")
		_talk = REPLACE(_talk,"\0\b[6]","\0\b[%(Balloon.Angel[0])6]")
		
		_talk = REPLACE(_talk,"\1\b[0]","\1\b[%(Balloon.Pilot[0])0]")
		_talk = REPLACE(_talk,"\1\b[2]","\1\b[%(Balloon.Pilot[0])2]")
		_talk = REPLACE(_talk,"\1\b[4]","\1\b[%(Balloon.Pilot[0])4]")
		_talk = REPLACE(_talk,"\1\b[6]","\1\b[%(Balloon.Pilot[0])6]")
		
		_talk = REPLACE(_talk,"__INPUT_BOX_COLOR_0__","--balloon=%(Balloon.Angel[0])0")
		_talk = REPLACE(_talk,"__INPUT_BOX_COLOR_1__","--balloon=%(Balloon.Pilot[0])0")
	}
	elseif SHIORI3FW.BalloonName == "Cotton Candy"
	{
		_talk = REPLACE(_talk,"\0\b[0]","\0\b[%(Balloon.Angel[1])0]")
		_talk = REPLACE(_talk,"\0\b[2]","\0\b[%(Balloon.Angel[1])2]")
		_talk = REPLACE(_talk,"\0\b[4]","\0\b[%(Balloon.Angel[1])4]")
		_talk = REPLACE(_talk,"\0\b[6]","\0\b[%(Balloon.Angel[1])0]")
		
		_talk = REPLACE(_talk,"\1\b[0]","\1\b[%(Balloon.Pilot[1])0]")
		_talk = REPLACE(_talk,"\1\b[2]","\1\b[%(Balloon.Pilot[1])2]")
		_talk = REPLACE(_talk,"\1\b[4]","\1\b[%(Balloon.Pilot[1])4]")
		_talk = REPLACE(_talk,"\1\b[6]","\1\b[%(Balloon.Pilot[1])0]")
		
		_talk = REPLACE(_talk,"__INPUT_BOX_COLOR_0__","--balloon=%(Balloon.Angel[1])0")
		_talk = REPLACE(_talk,"__INPUT_BOX_COLOR_1__","--balloon=%(Balloon.Pilot[1])0")
	}
	else
	{
		_talk = REPLACE(_talk,"\b[4]","\b[4,--fallback=2]")
		_talk = REPLACE(_talk,"\b[6]","\b[0]")
	}
	
	//This is the bit that runs envelopes in script input
	if reference1 == "" && reference2 == "" //If this is from script input
	{
		EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	else
	{
		TOSTR(_talk)
	}
}

OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0; "\j[%(reference0)]"
}





On_configuredbiffname
{
	EmailAddressList = reference
}



OnHourTimeSignal : nonoverlap
{
	"\0\b[0]\1\b[0]"
	--
	if HourNotifs == "On"
	{
		if hour == 0
		{
			"\0\s[blush]Hey check it out,\w4 it's midnight!\w8\w8\1\s[neutral_face]As happens every night."
		}
		elseif hour == 12
		{
			"\0\s[blush]Middle of the day,\w4 it's noon!\w8\w8\1\s[neutral_face]Soon to be afternoon."
		}
		else
		{
			"\0\s[blush]Bing bong,\w4 it's %(hour12ex) o'clock!\w8\w8\1\s[neutral_face]%(hour24):00."
		}
	}
}






OnNeedlePoke
{
	if reference0 == 0 //Sakura
	{
		"\0\b[0]"
		--
		nonoverlap :/
		{
			"\s[scream]Ouchie!!"
			"\s[scream]Hey!!"
			"\s[scream]Eek!!"
			"\s[scream]Hey,\w4 that's not fair!!"
			"\s[scream]Not the needle!!"
			"\s[scream]I'm being needled!!"
			"\s[scream]\i[36]Help,\w4 it got me!!"
		}
	}
	elseif reference0 == 1 //Kero
	{
		"\1\b[0]"
		--
		nonoverlap :/
		{
			"\s[expressionless]Must you?"
			"\s[teach]This is a good example of ways that ghosts may interact when overlapping.\w8\w8\s[unamused] That being said,\w4 cut it out."
			"\s[unamused]Nag nag yourself."
			"\s[rolling_eyes]Can I help you?"
		}
	}
}







OnDisplayChange
{
	displaybpp = reference0
 	displaywidth = reference1
	displayheight = reference2
}

//As the name implies, this checks if the balloon is currently open or not.
//Will be 0 if the balloon is not open, and 1 if the balloon is open
BalloonIsOpen
{
	"balloon" _in_ var.req.value[ASEARCH("Status",var.req.key)]
}

raised_hand
{
	"\i[21]"
}

// pos_on_screen
// {
	// //I should make this a pure function but I really have no reason to know Pilot's position on screen... I'll probably regret this later! Don't do this, kids!
	
	// //Need to take the sakura pos, and subtract it from the... right side of the monitor. if what's left over is still more than half the width of the monitor above the left, then it's past the midpoint
	
	// _from_left = sakura_pos - sakura_screen_width[2]
	
	// if _from_left < 0; _from_left *= -1
	
	
// }

OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif reference0 == "t"; OnAiTalk
	elseif reference0 == "r"; lastTalk
}

OnSurfaceRestore
{
	"\1\s[neutral_face]\0\s[slight_smile]"
}


// OnDisplayHandover
// {
	// if reference1 == 0
	// {
		// _left = TOINT(reference3[0])
		// _right = TOINT(reference3[2])
		
		// _difference = _right - _left
		// if _difference < 0; _difference *= -1
		
		// sakura_screen_width = (_difference,_left,_right)
	// }
// }

/*

Other things I want dialogue for:

Overlapping
Offscreen
Hour notifications? Maybe using the hour timesignal thing


*/

On_installedballoonname
{
	installedballoonlist = reference.raw
}

HasBalloon
{
	if ASEARCH(_argv[0],installedballoonlist) != -1; 1
	else; 0
}

On_homeurl
{
	"https://raw.githubusercontent.com/Zichqec/SSP_Angel/main/ssp_angel/"
}